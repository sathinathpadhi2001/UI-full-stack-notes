Integrate JavaScript functions into HTML page:

1. Inline
2. Embedded
3. External File

Inline:
- You can configure JavaScript function for every element individually.
- Function is defined for specific event.
- It is faster in interaction but can't reuse.

Syntax:
  <button onclick="window.print()"> Print </button>

Embedded
- You can configure functions in a <script> container and embed in page.
- Script uses the MIME type "text/javascript".
- You can embed in head or body.

Syntax:
   <script type="text/javascript">
        function  PrintPage()
        {
             window.print();
        }
  </script>

   <button onclick="PrintPage()"> Print </button>

- You can reuse the function across various elements in page.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function PrintPage() {
            window.print();
        }
    </script>
</head>
<body>
    <h2>Ticket</h2>
    <button onclick="PrintPage()">Print</button>
</body>
</html>

External File:
- You can keep JS functions in a separate script file, so that you can access and use from different pages.
- It increases the number of requests and page load time.

Ex:
1. Add a new file into "src/scripts" folder by name  "ticket.js

    function PrintPage()
    {
      window.print();
    }

2. Link to your HTML page

    <script src="../src/scripts/ticket.js"  type="text/javascript"> </script>

    <button onclick="PrintPage()"> Print </button>

Note: You can minify the JavaScript file to use in production environment.

    https://www.toptal.com/developers/javascript-minifier

FAQ: What are the issues with JavaScript?
Ans:
- It is not a strongly typed language.
- It is not implicitly strictly typed.
- It is not an OOP language.
- Extensibility issues.
- It can be blocked by browser.

FAQ: What is strictly typed?
Ans:  It sets the standards for code. If developer writes code without standards then it will report
         errors.

FAQ: How to turn on strict mode?
Ans:  By adding "use strict"  in your script area.

    <script type="text/javascript">
          "use strict";
           // your functions
    </script>

FAQ: What is difference between strongly typed and strictly typed?
Ans:  Strongly typed is verifying data type of value.
         Strictly typed is verifying standards of code.

FAQ: How to check the status of JavaScript in browser?
Ans : By using <noscript> element.

Syntax:
    <body>
       <noscript> please enable Javascript on your browser </noscript>
    </body>

            Accessing HTML elements

1. JavaScript can access HTML elements by using DOM hierarchy.
- Elements are arranged using DOM hierarchy.
- It refers to parent and child nodes.
- Nodes collection is an array type, which allows access using index number.
- It is the fastest way of interactions.
- It is the native method.

Syntax:
        window.document.images[ ]
        window.document.forms[].elements[]

- The major issue with DOM hierarchy is the change of position for element in page.
- Everytime you have to update its position in code, when ever design changes.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        "use strict";
        function bodyload(){
            window.document.images[0].src = "../public/images/women-fashion.jpg";
            window.document.forms[0].elements[2].value = "Register";
            window.document.forms[1].elements[2].value = "Login";
        }
    </script>
</head>
<body onload="bodyload()">
    <div>
        <img width="100" height="100">
    </div>
    <div>
        <form>
            <h3>Register</h3>
            User Name : <input type="text"> Age: <input type="number"> <input type="button">
        </form>
    </div>
    <div>
        <form>
            <h3>Login</h3>
            Mobile : <input type="text"> OTP : <input type="text" size="4"> <input type="button">
        </form>
    </div>
</body>
</html>

2. JavaScript can refer HTML elements by using a reference name
- Every element in page can have a reference "name".
- JS can access element using the name.

    <img name="pic">
    <form  name="frm">  <input type="button" name="btn">  </form>
   
    pic.src=" ";
                 frm.btn.value=" ";

- You can't access any child element without refering to its generic parent.
- Name can be same for several elements in page, which leads to issues.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        "use strict";
        function bodyload(){
             pic.src="../public/images/men-fashion.jpg";
             frmRegister.btnRegister.value = "Register";
             frmLogin.btnLogin.value = "Login";
        }
    </script>
</head>
<body onload="bodyload()">
    <div>
        <img width="100" height="100" name="pic">
    </div>
    <div>
        <form name="frmRegister">
            <h3>Register</h3>
            User Name : <input type="text"> Age: <input type="number"> <input name="btnRegister" type="button">
        </form>
    </div>
    <div>
        <form name="frmLogin">
            <h3>Login</h3>
            Mobile : <input type="text"> OTP : <input type="text" size="4"> <input name="btnLogin" type="button">
        </form>
    </div>
</body>
</html>